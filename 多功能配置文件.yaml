# ======================= 节点提供器配置（proxy-providers） =======================
# proxy-providers 是 Clash/Mihomo 的一项功能，用于从远程订阅源或本地 YAML 文件动态加载大量代理节点。
# 与传统直接在配置文件写入所有节点相比，proxy-providers 更加灵活、易维护。

proxy-providers:   #不使用订阅链接已被注释掉，需要使用直接删除开头的#即可
  # 订阅1：可填写机场订阅链接（建议命名规范统一）
  Subscription-1:         # 订阅名称，可自定义
    type: http
    url: "https://liangxin.xyz/api/v1/liangxin?OwO=23a2389cc87ca2e9b18c0efda13a51df"       #""中填写订阅机场链接
    interval: 86400
    path: ./providers/Subscription-1.yaml
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300

  # 订阅2：可填写机场订阅链接
  Subscription-2:         # 订阅名称，可自定义
    type: http
    url: "填写你的订阅链接"       #""中填写订阅机场链接
    interval: 186400
    path: ./providers/Subscription-2.yaml
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300

  # 订阅3：可填写机场订阅链接
  Subscription-3:         # 订阅名称，可自定义
    type: http
    url: "填写你的订阅链接"       #""中填写订阅机场链接
    interval: 86400
    path: ./providers/Subscription-3.yaml
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
  # 订阅4：可填写机场订阅链接
  Subscription-4:         # 订阅名称，可自定义
    type: http
    url: "填写你的订阅链接"       #""中填写订阅机场链接
    interval: 86400
    path: ./providers/Subscription-4.yaml
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
# ======================= 策略组配置（proxy-groups） =======================
# 策略组定义了节点的选择方式，适用于自动选择、手动选择、地区分流、网站特定走向等。
# 支持类型如下：
# - select：手动选择节点或其他组
# - url-test：测速后自动选择延迟最低的节点
# - fallback：故障转移，主节点失败时自动切换
# - fallback-auto：主节点恢复后自动切回（clash.meta 支持）
# - load-balance：将请求轮流均匀发送到多个节点
# - include-all: true → 自动包含所有节点
# - filter: 正则过滤节点名，配合 include-all 使用
# - icon: 设置图标，在支持的客户端上美观展示

proxy-groups:
  - name: 首页入口
    type: select
    proxies:
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://github.com/clash-verge-rev/clash-verge-rev/raw/main/src-tauri/icons/icon.png

  - name: 特殊使用
    type: select
    include-all: true
    filter: "(?i)^(?!.*(异常|剩余|流量|距离|官网|刷新|cn|com|套餐)).*$"
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png
  
  - name: Telegram
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png

  - name: OpenAi
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png

  - name: YouTube
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png

  - name: TikTok
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/TikTok.png

  - name: Google
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google.png

  - name: GitHub
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/GitHub_Letter.png

  - name: Facebook
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Facebook.png

  - name: Instagram
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Instagram.png

  - name: AppStore
    type: select
    proxies:
      - DIRECT
      - 首页入口
      - 美国节点
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 韩国节点
      - 备用节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple.png  

  - name: 国内媒体
    type: select
    proxies:
      - DIRECT
      - 香港节点
      - 台湾节点
      - 日本节点
      - 美国节点
      - 新加坡节点
      - 韩国节点
      - 日本节点
      - 备用节点
    icon: https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/DomesticMedia.png

  - name: 漏网之鱼
    type: select
    proxies:
      - 首页入口
      - 香港节点
      - 台湾节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 韩国节点
      - 备用节点
      - DIRECT
    icon: https://img.icons8.com/?size=144&id=9Mz1BhM4ui54&format=png&color=000000
    
  - name: 全球直连
    type: select
    proxies:
      - DIRECT
      - 首页入口

    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png


  # 以下为按节点名称自动分类的节点组，方便管理大量节点。

  - name: 香港节点
    type: select
    include-all: true
    filter: "(?i)港|HK|hk|Hong Kong|HongKong|hongkong"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 台湾节点
    type: select
    include-all: true
    filter: "(?i)台|新北|彰化|TW|Taiwan"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 日本节点
    type: select
    include-all: true
    filter: "(?i)日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 美国节点
    type: select
    include-all: true
    filter: "(?i)美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 新加坡节点
    type: select
    include-all: true
    filter: "(?i)新加坡|坡|狮城|SG|Singapore"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 韩国节点
    type: select
    include-all: true
    filter: "(?i)KR|Korea|KOR|首尔|韩|韓"
    icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: 备用节点
    type: select
    include-all: true
    filter: "(?i)^(?!.*(港|HK|Hong Kong|HongKong|hongkong|台|新北|彰化|TW|Taiwan|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan|美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States|新加坡|坡|狮城|SG|Singapore|KR|Korea|KOR|首尔|韩|韓|NF|奈飞|解锁|Netflix|NETFLIX|Media|流媒体|异常|剩余|流量|距离|官网|刷新|cn|com|套餐)).*$"
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Server.png
    strategy: latency
    health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    retries: 3

  - name: GLOBAL
    include-all: true
    type: select
    filter: "(?i)^(?!.*(异常|剩余|流量|距离|官网|刷新|cn|com|套餐)).*$"
    icon: https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Global.png

# ======================= 规则提供器配置（rule-providers） =======================
# rule-providers 用于引用远程或本地的规则文件，例如 DOMAIN、GEOIP、IP-CIDR 等类型的规则集合。
# 优点：
# - 规则文件独立，主配置简洁
# - 支持自动定时更新，方便维护
# - 可多平台共享统一规则
# 使用方式：
# 在 rules 中通过 RULE-SET 语法调用，比如：
#   RULE-SET,LocalAreaNetwork,DIRECT
# 表示匹配 LocalAreaNetwork 规则集的流量使用 DIRECT 策略

rule-providers:
  LocalAreaNetwork:
    type: http                              # 规则类型，http 表示远程获取
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/LocalAreaNetwork.list
    # 规则文件 URL，支持文本格式或 YAML 格式
    path: ./ruleset/LocalAreaNetwork.list  # 本地缓存文件路径
    behavior: classical                     # 规则行为类型，classical 支持多类型规则（域名、IP等）
    interval: 86400                        # 规则更新间隔，单位秒，86400 秒即每天自动更新一次
    format: text                           # 规则文件格式，text 表示文本规则（而非 yaml 格式）
  UnBan:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/UnBan.list
    path: ./ruleset/UnBan.list
    behavior: classical
    interval: 86400
    format: text
    type: http
    
  BanAD:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/BanAD.list
    path: ./ruleset/BanAD.list
    behavior: classical
    interval: 86400
    format: text
    type: http
    
  BanProgramAD:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/BanProgramAD.list
    path: ./ruleset/BanProgramAD.list
    behavior: classical
    interval: 86400
    format: text
    type: http
    
  Google:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Google/Google.list
    path: ./ruleset/Google.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  SteamCN:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/SteamCN/SteamCN.list
    path: ./ruleset/SteamCN.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Apple:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Apple/Apple.list
    path: ./ruleset/Apple.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Telegram:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Telegram/Telegram.list
    path: ./ruleset/Telegram.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  OpenAi:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/OpenAI/OpenAI.list
    path: ./ruleset/OpenAi.list
    behavior: classical
    interval: 86400
    format: text
    type: http
  
  GitHub:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/GitHub/GitHub.list
    path: ./ruleset/GitHub.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Disney:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Disney/Disney.list
    path: ./ruleset/Disney.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Twitter:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Twitter/Twitter.list
    path: ./ruleset/Twitter.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Facebook:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Facebook/Facebook.list
    path: ./ruleset/Facebook.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Instagram:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Instagram/Instagram.list
    path: ./ruleset/Instagram.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Spotify:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Spotify/Spotify.list
    path: ./ruleset/Spotify.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  OneDrive:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/OneDrive/OneDrive.list
    path: ./ruleset/OneDrive.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  YouTube:
    url: https://raw.githubusercontent.com/myzxdcd/CS/refs/heads/main/Clash/YouTube.yaml
    path: ./ruleset/YouTube.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  Netflix:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Netflix/Netflix.list
    path: ./ruleset/Netflix.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  TikTok:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/TikTok/TikTok.list
    path: ./Ruleset/TikTok.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  ChinaMedia:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/ChinaMedia/ChinaMedia.list
    path: ./ruleset/ChinaMedia.list
    behavior: classical
    interval: 86400
    format: text
    type: http
  
  ProxyMedia:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ProxyMedia.list
    path: ./ruleset/ProxyMedia.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  ChinaDomain:
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Loon/China/China_Domain.list
    path: ./ruleset/ChinaDomain.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  ChinaCompanyIp:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/ChinaCompanyIp.list
    path: ./ruleset/ChinaCompanyIp.list
    behavior: ipcidr
    interval: 86400
    format: text
    type: http

  Download:
    url: https://testingcf.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Download.list
    path: ./ruleset/Download.list
    behavior: classical
    interval: 86400
    format: text
    type: http

  HT:
    url: https://raw.githubusercontent.com/myzxdcd/CS/refs/heads/main/Clash/HT
    path: ./ruleset/HT.list
    behavior: classical
    interval: 86400
    format: text
    type: http

# ======================= 规则集配置（rules） =======================
# 规则用于匹配特定流量，结合上方 rule-providers 里的规则文件，实现自动分流。
# 规则格式：
# - RULE-SET,规则集名称,策略组名称
# 说明：
# - 第一个名称对应 rule-providers 中定义的规则集名称
# - 第二个名称对应 proxy-groups 中定义的策略组名称
#
# 示例：
# - RULE-SET,Google, Google
# 表示请求匹配 Google 规则集的流量走 Google 策略组
rules:  
  - DOMAIN-SUFFIX,vilink.cc,香港节点
  - "RULE-SET,HT,特殊使用"
  - "RULE-SET,SteamCN, 全球直连"
  - "RULE-SET,OpenAi, OpenAi"
  - "RULE-SET,YouTube, YouTube"
  - "RULE-SET,TikTok, TikTok"
  - "RULE-SET,Apple, AppStore"
  - "RULE-SET,GitHub, GitHub"
  - "RULE-SET,Facebook, Facebook"
  - "RULE-SET,Instagram, Instagram"
  - "RULE-SET,Google, Google"
  - "RULE-SET,Telegram, Telegram"
  - "RULE-SET,ChinaMedia,国内媒体"
  - "RULE-SET,ChinaDomain,全球直连"
  - "RULE-SET,ChinaCompanyIp,全球直连"
  - "RULE-SET,Download,全球直连"
  - "GEOIP,CN, 全球直连,no-resolve"  # 中国大陆IP直连
  - "MATCH, 漏网之鱼"        # 兜底规则，未匹配流量走“漏网之鱼”组
  
#------------------- 规则说明 -------------------
# 1. DOMAIN-KEYWORD
#    - 匹配包含指定关键字的域名请求。
#    - 例：DOMAIN-KEYWORD,google 会匹配所有域名中包含 "google" 的请求，如 www.google.com、notgoogle.com。
#
# 2. DOMAIN-SUFFIX
#    - 匹配以指定后缀结尾的域名请求。
#    - 例：DOMAIN-SUFFIX,google.com 匹配 www.google.com 和 mail.google.com，但不匹配 mygoogle.com。
#
# 3. DOMAIN
#    - 完全匹配指定的完整域名。
#    - 例：DOMAIN,www.google.com 只匹配 www.google.com，不匹配 mail.google.com。
#
# 4. IP-CIDR
#    - 匹配指定的 IP 地址段流量。
#    - 例：IP-CIDR,192.168.0.0/16 匹配所有 192.168.x.x 的请求。
#
# 5. GEOIP
#    - 根据目标 IP 的归属国家/地区进行匹配。
#    - 例：GEOIP,CN 匹配所有归属于中国的 IP 地址。
#    - 需确保已加载 GEOIP 数据库。
#
# 6. GEOSITE
#    - 根据目标域名所属地理区域匹配。
#    - 例：GEOSITE,cn 匹配中国大陆相关域名。
#    - 依赖 GEOSITE 规则库文件。
#
# 7. MATCH
#    - 匹配所有未被之前规则匹配的剩余流量。
#    - 例：MATCH 通常作为兜底规则，放在规则列表最后。
#
# 8. PROCESS-NAME
#    - 根据发起请求的进程名匹配（部分客户端支持）。
#    - 例：PROCESS-NAME,chrome.exe 匹配 Chrome 浏览器的请求。
#
# 9. SRC-IP-CIDR
#    - 根据请求来源的 IP 地址段匹配（部分客户端支持）。
#    - 例：SRC-IP-CIDR,192.168.1.0/24 匹配局域网指定网段来源的请求。
#
# 10. USER-AGENT
#     - 根据 HTTP 请求的 User-Agent 字段匹配（部分客户端支持）。
#     - 例：USER-AGENT,Firefox 匹配 Firefox 浏览器请求。
#
# 注意事项：
# - 规则顺序重要，匹配到规则即生效，后续规则忽略。
# - 精准和访问频率高的规则放前面，提升匹配效率。
# - 使用 MATCH 规则做兜底，保证所有流量都有处理策略。
# - GEOIP 和 GEOSITE 规则依赖对应的数据库或规则文件，需定期更新。
# - RULE-SET 可以引用远程规则文件，实现规则集中管理。
# - 书写规则时请确保格式和缩进正确，符合 YAML 规范。

# 规则添加示例：
# - DOMAIN-SUFFIX,example.com, 自动选择
# - DOMAIN-KEYWORD,facebook, 首页入口
# - IP-CIDR,8.8.8.8/32, DIRECT
# 规则顺序重要，越靠前优先级越高。
